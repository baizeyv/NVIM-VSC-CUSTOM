// Place your key bindings in this file to override the defaults
[
    {
        "key": "alt+1",
        "command": "-workbench.action.openEditorAtIndex1"
    },
    {
        "key": "alt+1",
        "command": "workbench.view.explorer",
        "when": "viewContainer.workbench.view.explorer.enabled"
    },
    {
        "key": "ctrl+shift+e",
        "command": "-workbench.view.explorer",
        "when": "viewContainer.workbench.view.explorer.enabled"
    },
    {
        "key": "ctrl+e",
        "command": "-editor.action.toggleScreenReaderAccessibilityMode",
        "when": "accessibilityHelpIsShown"
    },
    {
        "key": "ctrl+e",
        "command": "-workbench.action.quickOpen"
    },
    {
        "key": "ctrl+e",
        "command": "-workbench.action.quickOpenNavigateNextInFilePicker",
        "when": "inFilesPicker && inQuickOpen"
    },
    {
        "key": "ctrl+e",
        "command": "focusNextRenameSuggestion",
        "when": "renameInputVisible"
    },
    {
        "key": "ctrl+n",
        "command": "-focusNextRenameSuggestion",
        "when": "renameInputVisible"
    },
    {
        "key": "ctrl+down",
        "command": "-selectNextSuggestion",
        "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus || suggestWidgetVisible && textInputFocus && !suggestWidgetHasFocusedSuggestion"
    },
    {
        "key": "ctrl+n",
        "command": "-selectNextSuggestion",
        "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus"
    },
    {
        "key": "ctrl+up",
        "command": "-selectPrevSuggestion",
        "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus || suggestWidgetVisible && textInputFocus && !suggestWidgetHasFocusedSuggestion"
    },
    {
        "key": "ctrl+k ctrl+u",
        "command": "-editor.action.removeCommentLine",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "ctrl+k ctrl+c",
        "command": "-editor.action.addCommentLine",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "ctrl+oem_2",
        "command": "-editor.action.commentLine",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "shift+alt+a",
        "command": "-editor.action.blockComment",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "ctrl+space",
        "command": "-editor.action.triggerSuggest",
        "when": "editorHasCompletionItemProvider && textInputFocus && !editorReadonly && !suggestWidgetVisible"
    },
    {
        "key": "ctrl+n",
        "command": "editor.action.inlineSuggest.hide",
        "when": "inlineSuggestionVisible"
    },
    {
        "key": "escape",
        "command": "-editor.action.inlineSuggest.hide",
        "when": "inlineSuggestionVisible"
    },
    {
        "key": "ctrl+shift+n",
        "command": "-workbench.action.newWindow"
    },
    {
        "key": "ctrl+n",
        "command": "-workbench.action.files.newUntitledFile"
    },
    {
        "key": "ctrl+e",
        "command": "workbench.action.quickOpenSelectNext",
        "when": "inQuickOpen && neovim.mode != 'cmdline'"
    },
    {
        "key": "ctrl+n",
        "command": "-workbench.action.quickOpenSelectNext",
        "when": "inQuickOpen && neovim.mode != 'cmdline'"
    },
    {
        "key": "ctrl+oem_1 ctrl+l",
        "command": "-testing.debugLastRun"
    },
    {
        "key": "ctrl+oem_1 ctrl+e",
        "command": "-testing.debugFailTests"
    },
    {
        "key": "ctrl+oem_1 ctrl+a",
        "command": "-testing.debugAll"
    },
    {
        "key": "ctrl+oem_1 ctrl+shift+a",
        "command": "-testing.coverageAll"
    },
    {
        "key": "ctrl+oem_1 ctrl+m",
        "command": "-testing.openOutputPeek"
    },
    {
        "key": "ctrl+oem_1 ctrl+i",
        "command": "-testing.toggleInlineTestOutput"
    },
    {
        "key": "ctrl+oem_1 ctrl+shift+i",
        "command": "-testing.toggleInlineCoverage"
    },
    {
        "key": "ctrl+oem_1 ctrl+r",
        "command": "-testing.refreshTests",
        "when": "testing.canRefresh"
    },
    {
        "key": "ctrl+oem_1 ctrl+o",
        "command": "-testing.showMostRecentOutput",
        "when": "testing.hasAnyResults"
    },
    {
        "key": "ctrl+oem_1 ctrl+shift+c",
        "command": "-testing.coverageAtCursor",
        "when": "editorTextFocus"
    },
    {
        "key": "ctrl+oem_1 a",
        "command": "-testing.runAll"
    },
    {
        "key": "ctrl+oem_1 ctrl+f",
        "command": "-testing.debugCurrentFile",
        "when": "editorTextFocus"
    },
    {
        "key": "ctrl+oem_1 f",
        "command": "-testing.runCurrentFile",
        "when": "editorTextFocus"
    },
    {
        "key": "ctrl+oem_1 ctrl+shift+f",
        "command": "-testing.coverageCurrentFile",
        "when": "editorTextFocus"
    },
    {
        "key": "ctrl+oem_1 ctrl+c",
        "command": "-testing.debugAtCursor",
        "when": "editorTextFocus"
    },
    {
        "key": "ctrl+oem_1 c",
        "command": "-testing.runAtCursor",
        "when": "editorTextFocus"
    },
    {
        "key": "ctrl+oem_1 l",
        "command": "-testing.reRunLastRun"
    },
    {
        "key": "ctrl+oem_1 ctrl+shift+l",
        "command": "-testing.coverageLastRun"
    },
    {
        "key": "ctrl+oem_1 e",
        "command": "-testing.reRunFailTests"
    },
    {
        "key": "ctrl+oem_1 ctrl+x",
        "command": "-testing.cancelRun"
    },
    {
        "key": "shift+alt+win+j",
        "command": "-notebook.cell.joinAbove",
        "when": "notebookEditorFocused"
    },
    {
        "key": "alt+win+j",
        "command": "-notebook.cell.joinBelow",
        "when": "notebookEditorFocused"
    },
    {
        "key": "shift+alt+d",
        "command": "-notebook.cell.detectLanguage",
        "when": "notebookCellEditable && notebookEditable"
    },
    {
        "key": "alt+delete",
        "command": "-notebook.cell.clearOutputs",
        "when": "notebookCellEditable && notebookCellHasOutputs && notebookEditable && notebookEditorFocused && !inputFocus"
    },
    {
        "key": "alt+up",
        "command": "-notebook.cell.moveUp",
        "when": "notebookEditorFocused && !inputFocus"
    },
    {
        "key": "shift+alt+f",
        "command": "-notebook.format",
        "when": "notebookEditable && !editorTextFocus && activeEditor == 'workbench.editor.notebook'"
    },
    {
        "key": "ctrl+alt+enter",
        "command": "-notebook.cell.quitEdit",
        "when": "inputFocus && notebookEditorFocused && !inlineChatFocused && notebookCellType == 'markup'"
    },
    {
        "key": "alt+down",
        "command": "-notebook.cell.moveDown",
        "when": "notebookEditorFocused && !inputFocus"
    },
    {
        "key": "shift+alt+f",
        "command": "-editor.action.formatDocument",
        "when": "editorHasDocumentFormattingProvider && editorTextFocus && !editorReadonly && !inCompositeEditor"
    },
    {
        "key": "shift+alt+f",
        "command": "-editor.action.formatDocument.none",
        "when": "editorTextFocus && !editorHasDocumentFormattingProvider && !editorReadonly"
    },
    {
        "key": "shift+alt+f",
        "command": "-notebook.formatCell",
        "when": "editorHasDocumentFormattingProvider && editorTextFocus && inCompositeEditor && notebookEditable && !editorReadonly && activeEditor == 'workbench.editor.notebook'"
    },
    {
        "key": "shift+alt+f",
        "command": "-filesExplorer.findInFolder",
        "when": "explorerResourceIsFolder && filesExplorerFocus && foldersViewVisible && !inputFocus"
    },
    {
        "key": "ctrl+alt+f",
        "command": "-list.find",
        "when": "listFocus && listSupportsFind"
    },
    {
        "key": "ctrl+alt+f",
        "command": "-list.find.replInputFocus",
        "when": "view == 'workbench.panel.repl.view'"
    },
    {
        "key": "ctrl+alt+f",
        "command": "-repl.action.find",
        "when": "inDebugRepl || inDebugRepl && focusedView == 'workbench.panel.repl.view'"
    },
    {
        "key": "shift+alt+f",
        "command": "-search.action.restrictSearchToFolder",
        "when": "folderMatchWithResourceFocus && searchViewletVisible"
    },
    {
        "key": "ctrl+a",
        "command": "-notebook.cell.output.selectAll",
        "when": "notebookEditorFocused && notebookOutputFocused"
    },
    {
        "key": "ctrl+a",
        "command": "-editor.action.selectAll"
    },
    {
        "key": "ctrl+a",
        "command": "-list.selectAll",
        "when": "listFocus && listSupportsMultiselect && !inputFocus && !treestickyScrollFocused"
    },
    {
        "command": "vscode-neovim.send",
        "key": "ctrl+,",
        "when": "editorTextFocus",
        "args": "<C-,>"
    },
    {
        "command": "vscode-neovim.send",
        "key": "ctrl+.",
        "when": "editorTextFocus",
        "args": "<C-.>"
    },
    {
        "command": "vscode-neovim.send",
        "key": "alt+e",
        "when": "editorTextFocus",
        "args": "<A-e>"
    },
    {
        "command": "vscode-neovim.send",
        "key": "alt+u",
        "when": "editorTextFocus",
        "args": "<A-u>"
    },
    {
        "command": "vscode-neovim.send",
        "key": "alt+n",
        "when": "editorTextFocus",
        "args": "<A-n>"
    },
    {
        "command": "vscode-neovim.send",
        "key": "alt+i",
        "when": "editorTextFocus",
        "args": "<A-i>"
    },
    {
        "key": "shift+tab",
        "command": "-jumpToPrevSnippetPlaceholder",
        "when": "hasPrevTabstop && inSnippetMode && textInputFocus"
    },
    {
        "key": "tab",
        "command": "-jumpToNextSnippetPlaceholder",
        "when": "hasNextTabstop && inSnippetMode && textInputFocus"
    },
    {
        "key": "tab",
        "command": "-editor.action.inlineEdit.accept",
        "when": "cursorAtInlineEdit && inlineEditVisible && !editorReadonly"
    },
    {
        "key": "tab",
        "command": "-editor.action.inlineSuggest.commit",
        "when": "inlineSuggestionHasIndentationLessThanTabSize && inlineSuggestionVisible && !editorHoverFocused && !editorTabMovesFocus && !suggestWidgetVisible"
    },
    {
        "key": "ctrl+u",
        "command": "-list.focusPageUp",
        "when": "listFocus && !inputFocus"
    },
    {
        "key": "u",
        "command": "list.focusUp",
        "when": "listFocus && !inputFocus && !inputFocus"
    },
    {
        "key": "e",
        "command": "list.focusDown",
        "when": "listFocus && !editorTextFocus && !inputFocus"
    },
    {
        "key": "j",
        "command": "-list.focusDown",
        "when": "listFocus && !inputFocus"
    },
    {
        "key": "k",
        "command": "-list.focusUp",
        "when": "listFocus && !inputFocus"
    },
    {
        "key": "shift+u",
        "command": "list.focusUp",
        "when": "listFocus && !inputFocus"
    },
    {
        "key": "shift+e",
        "command": "list.focusDown",
        "when": "listFocus && !inputFocus"
    },
    {
        "key": "h",
        "command": "-list.collapse",
        "when": "listFocus && !inputFocus"
    },
    {
        "key": "alt+7",
        "command": "outline.focus"
    },
    {
        "key": "alt+3",
        "command": "workbench.view.scm",
        "when": "workbench.scm.active"
    },
    {
        "key": "alt+8",
        "command": "workbench.view.debug",
        "when": "viewContainer.workbench.view.debug.enabled"
    },
    {
        "key": "up",
        "command": "-quickInput.previous",
        "when": "inQuickInput && quickInputType == 'quickPick'"
    },
    {
        "key": "ctrl+shift+u",
        "command": "quickInput.first",
        "when": "inQuickInput && quickInputType == 'quickPick'"
    },
    {
        "key": "ctrl+shift+e",
        "command": "quickInput.last",
        "when": "inQuickInput && quickInputType == 'quickPick'"
    },
    {
        "key": "alt+2",
        "command": "workbench.files.action.focusOpenEditorsView",
        "when": "workbench.explorer.openEditorsView.active"
    },
    {
        "key": "alt+2",
        "command": "-workbench.action.openEditorAtIndex2"
    },
    {
        "key": "shift+escape",
        "command": "workbench.action.showCommands"
    },
    {
        "key": "ctrl+oem_5",
        "command": "-workbench.action.splitEditor"
    },
    {
        "key": "ctrl+oem_plus",
        "command": "-workbench.action.zoomIn"
    },
    {
        "key": "ctrl+oem_minus",
        "command": "-workbench.action.zoomOut"
    },
    {
        "key": "ctrl+o",
        "command": "-workbench.action.files.openFile",
        "when": "true"
    },
    {
        "key": "ctrl+o",
        "command": "-workbench.action.files.openFolderViaWorkspace",
        "when": "!openFolderWorkspaceSupport && workbenchState == 'workspace'"
    },
    {
        "key": "ctrl+o",
        "command": "-workbench.action.files.openFileFolder",
        "when": "isMacNative && openFolderWorkspaceSupport"
    },
    {
        "key": "ctrl+o",
        "command": "-workbench.action.files.openLocalFile",
        "when": "remoteFileDialogVisible"
    },
    {
        "key": "e",
        "command": "editor.action.scrollDownHover",
        "when": "editorHoverFocused"
    },
    {
        "key": "u",
        "command": "editor.action.scrollUpHover",
        "when": "editorHoverFocused"
    },
    {
        "key": "tab",
        "command": "-tab",
        "when": "editorTextFocus && !editorReadonly && !editorTabMovesFocus"
    },
    {
        "key": "tab",
        "command": "tab",
        "when": "neovim.mode == 'insert'"
    },
    {
        "key": "tab",
        "command": "-insertSnippet",
        "when": "editorTextFocus && hasSnippetCompletions && !editorTabMovesFocus && !inSnippetMode"
    },
    {
        "key": "tab",
        "command": "-acceptSelectedSuggestion",
        "when": "suggestWidgetHasFocusedSuggestion && suggestWidgetVisible && textInputFocus"
    },
    {
        "key": "alt+9",
        "command": "workbench.view.extension.todo-tree-container"
    },
    {
        "key": "tab",
        "command": "editor.action.inlineSuggest.commit",
        "when": "inlineSuggestionVisible && inputFocus"
    },
    {
        "key": "tab",
        "command": "jumpToNextSnippetPlaceholder",
        "when": "inSnippetMode && textInputFocus && !inlineSuggestionVisible"
    },
    {
        "key": "shift+tab",
        "command": "jumpToPrevSnippetPlaceholder",
        "when": "inSnippetMode && textInputFocus"
    },
    {
        "key": "enter",
        "command": "-list.select",
        "when": "listFocus && !inputFocus && !treestickyScrollFocused"
    },
    {
        "key": "enter",
        "command": "-list.select",
        "when": "listFocus && !inputFocus && !notebookCellListFocused"
    },
    {
        "key": "shift+i",
        "command": "list.select",
        "when": "listFocus && !inputFocus"
    },
    {
        "key": "l",
        "command": "-list.select",
        "when": "listFocus && !inputFocus"
    },
    {
        "key": "alt+4",
        "command": "workbench.view.extension.bookmarks"
    },
    {
        "key": "ctrl+u",
        "command": "focusPreviousRenameSuggestion",
        "when": "renameInputVisible"
    },
    {
        "key": "ctrl+e",
        "command": "quickInput.next",
        "when": "inQuickInput && quickInputType == 'quickPick'"
    },
    {
        "key": "ctrl+u",
        "command": "quickInput.previous",
        "when": "inQuickInput && quickInputType == 'quickPick'"
    },
    {
        "key": "tab",
        "command": "search.focus.nextInputBox",
        "when": "inSearchEditor && inputBoxFocus || inputBoxFocus && searchViewletVisible"
    },
    {
        "key": "ctrl+down",
        "command": "-search.focus.nextInputBox",
        "when": "inSearchEditor && inputBoxFocus || inputBoxFocus && searchViewletVisible"
    },
    {
        "key": "shift+tab",
        "command": "search.action.focusSearchFromResults",
        "when": "searchViewletVisible"
    },
    {
        "key": "ctrl+up",
        "command": "-search.action.focusSearchFromResults",
        "when": "accessibilityModeEnabled && searchViewletVisible || firstMatchFocus && searchViewletVisible"
    },
    {
        "key": "enter",
        "command": "enterWithCancelSelection",
        "when": "listFocus && !inputFocus"
    },
    {
        "key": "tab",
        "command": "insertNextSuggestion",
        "when": "hasOtherSuggestions && textInputFocus && !inSnippetMode && !suggestWidgetVisible && config.editor.tabCompletion == 'on'"
    },
    {
        "key": "tab",
        "command": "-insertNextSuggestion",
        "when": "hasOtherSuggestions && textInputFocus && !inSnippetMode && !suggestWidgetVisible && config.editor.tabCompletion == 'on'"
    },
    {
        "key": "ctrl+h",
        "command": "-editor.action.startFindReplaceAction",
        "when": "editorFocus || editorIsOpen"
    },
    {
        "key": "ctrl+h",
        "command": "deleteLeft",
        "when": "textInputFocus"
    },
    {
        "key": "backspace",
        "command": "-deleteLeft",
        "when": "textInputFocus"
    },
    {
        "key": "ctrl+w",
        "command": "deleteWordLeft",
        "when": "textInputFocus && !editorReadonly"
    },
    {
        "key": "ctrl+backspace",
        "command": "-deleteWordLeft",
        "when": "textInputFocus && !editorReadonly"
    },
    {
        "key": "l",
        "command": "undo",
        "when": "editorHoverFocused"
    },
    {
        "key": "ctrl+z",
        "command": "-undo"
    },
    {
        "key": "l",
        "command": "vscode-neovim.send",
        "when": "editorTextFocus && neovim.init && focusedView == 'workbench.panel.output' && neovim.mode != 'insert'"
    },
    {
        "key": "l",
        "command": "-vscode-neovim.send",
        "when": "editorTextFocus && neovim.init && focusedView == 'workbench.panel.output' && neovim.mode != 'insert'"
    },
    {
        "key": "ctrl+h",
        "command": "noteMultiCursor.deleteLeft",
        "when": "config.notebook.multiSelect.enabled && isNotebookMultiSelect && activeEditor == 'workbench.editor.notebook' && notebookMultiSelectState == '1' || config.notebook.multiSelect.enabled && isNotebookMultiSelect && activeEditor == 'workbench.editor.notebook' && notebookMultiSelectState == '2'"
    },
    {
        "key": "backspace",
        "command": "-noteMultiCursor.deleteLeft",
        "when": "config.notebook.multiSelect.enabled && isNotebookMultiSelect && activeEditor == 'workbench.editor.notebook' && notebookMultiSelectState == '1' || config.notebook.multiSelect.enabled && isNotebookMultiSelect && activeEditor == 'workbench.editor.notebook' && notebookMultiSelectState == '2'"
    },
    {
        "key": "ctrl+e",
        "command": "selectNextCodeAction",
        "when": "codeActionMenuVisible"
    },
    {
        "key": "ctrl+u",
        "command": "selectPrevCodeAction",
        "when": "codeActionMenuVisible"
    }
]